@page "/counter/{currentCountParameter?}"
@inject ILogger<Counter> logger;

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<div style=@divStyle @onmouseover="ChangeColor" @onmouseout="RestoreColor">
    Este elemento cambia de color al pasar el mouse.
</div>

@code {
    private int currentCount = 0;
    [Parameter]
    public string? currentCountParameter { get; set; }
    [SupplyParameterFromQuery]
    [Parameter]
    public string counterFromQuery{ get; set; }

    private string divStyle = "background-color: red;";

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<string>(nameof(currentCountParameter), out var value))
            if (value is not null)
            {
                currentCountParameter = value;
            }
        await base.SetParametersAsync(parameters);
    }

    protected override void OnParametersSet()
    {
        logger.LogInformation("se envian los parametros");
    }

    protected override void OnInitialized()
    {
        //currentCount = currentCountParameter != null ? int.Parse(currentCountParameter) : 0;
        currentCount = counterFromQuery != null ? int.Parse(counterFromQuery) : 0;
        logger.LogInformation("se inicia el componente");
    }

    // protected override void OnAfterRender(bool firstRender)
    // {
    //     logger.LogInformation("esto ocurre despues de iniciar el componente");
    // }


    private void IncrementCount()
    {
        currentCount++;
    }
    private void ChangeColor()
    {
        divStyle = "background-color: blue;";
    }

    private void RestoreColor()
    {
        divStyle = "background-color: red;";
    }
}
