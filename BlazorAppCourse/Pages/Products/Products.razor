@page "/product"
@inject ILogger<Products> logger;
@inject IProductService productService;
@inject NavigationManager navigationManager;
@inject IJSRuntime JSRuntime;

<PageTitle>Products</PageTitle>

<h1>Products</h1>

<button class="btn btn-primary" @onclick="GoToAddProducts">Go to addProducts</button>

<br />

@if (products?.Count() > 0 && products is not null)
{
    <div class="products-container">
        @foreach (var product in products)
        {
            <div class="card">
                <img class="card-img-top" src="@product.images[0]" alt="Product" loading="lazy" width="270" height="210">
                <div class="card-body">
                    <h4><b>@product.title</b></h4>
                    <p>@product.price.ToString("C")</p>
                    <MudButton Variant="Variant.Filled" Color="Color.Info" @onclick="@(() => GoToUpdateProducts(product.id))">Actualizar</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="@(() => deleteProducts(product))">Eliminar</MudButton>
                    @* <button title="Delete" class="btn-danger" @onclick="@(() => deleteProducts(product))"><span class="btn-danger"></span></button> *@
                </div>
            </div>
        }
    </div>
}
else{
    <p>No existen productos</p>
}

@code {

    private List<Product>? products;

    protected override async Task OnInitializedAsync()
    {
        await GetProducts();
    }

    public async Task GetProducts()
    {
        products = await productService.getProductsAsync();
        products?.ForEach(product =>
        {
        product.images = product.images.Select(img => img.Trim('\\')).ToArray();
        });
    }

    private void GoToAddProducts()
    {
        navigationManager.NavigateTo("/addProduct");
    }

    private async Task deleteProducts(Product product)
    {
        //var confirmation = await JSRuntime.InvokeAsync<bool>("confirm", $"esta seguro que desea eliminar {product.title}?");
        var confirmation = await JSRuntime.InvokeAsync<bool>("showSweetAlert", "Eliminar registro?", $"esta seguro que desea eliminar {product.title}?");
        if (!confirmation)
        {
            return;
        }
        await productService.deleteProductsAsync(product.id);
        await GetProducts();
    }

    private void GoToUpdateProducts(int productId)
    {
        navigationManager.NavigateTo($"/updateProduct/{productId}");
    }
}

<script src="alerts.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
